module Main where

import Test.Hspec
import FunctionMachine
import Helpers
import Experiments

main :: IO ()
main = hspec $ do
  describe "exes" $ do -- headings and labels
    describe "exeProgram'" $ do
      it "what should this do ???" $ do
        exeProgram' [0,1,0,1] (FuncMach [(\x->(last x)+1),(\x->(last x)+2)] [2]) `shouldBe` [2,3,5,6,8]
        exeProgram' [0]       (FuncMach [(\x->(last x)+1),(\x->(last x)+2)] [2]) `shouldBe` [2,3]
        exeProgram' [2,2,0,2] (funM3 [2])                                        `shouldBe` [2,2,4,4,12]

    describe "exeProgram" $ do
      it "???" $ do
        exeProgram [0,1,0,1] (FuncMach [(\x->(last x)+1),(\x->(last x)+2)] [2]) `shouldBe` 8
        exeProgram [0]       (FuncMach [(\x->(last x)+1),(\x->(last x)+2)] [2]) `shouldBe` 3

    describe "exeProgramOnLs" $ do
      it "???" $ do
        exeProgramOnLs [5,2]       funM1 [0..20] `shouldBe` [0.0,1.0,3.0,6.0,10.0,15.0,21.0,28.0,36.0,45.0,55.0,66.0,78.0,91.0,105.0,120.0,136.0,153.0,171.0,190.0,210.0]
        exeProgramOnLs [2,5]       funM1 [0..10] `shouldBe` [0.0,1.0,3.0,6.0,10.0,15.0,21.0,28.0,36.0,45.0,55.0]
        exeProgramOnLs [2,2,0,2]   funM2 [0..20] `shouldBe` [0,6,12,18,24,30,36,42,48,54,60,66,72,78,84,90,96,102,108,114,120]
        exeProgramOnLs [0,1,2]     funM2 [0..20] `shouldBe` [1,4,7,10,13,16,19,22,25,28,31,34,37,40,43,46,49,52,55,58,61]
        exeProgramOnLs [0,1,0,1,1] funM2 [0..20] `shouldBe` [3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23]

  describe "finders" $ do
    describe "findPrograms" $ do
      it "???" $ do
        findPrograms (funM1 [1]) 8 4 `shouldBe` [[0,1,2,2],[0,2,2,2],[0,3,1,2],[1,0,2,2],[1,1,1,2],[1,2,0,2],[1,2,2,0],[1,2,2,4],[1,2,4,2],[1,3,1,1],[1,4,2,2],[2,0,2,2],[2,1,1,2],[2,2,0,2],[2,2,2,0],[2,2,2,4],[2,2,4,2],[2,3,1,1],[2,4,2,2],[3,0,1,2],[3,1,0,2],[3,1,2,0],[3,1,2,4],[3,1,4,2],[3,2,1,1],[3,4,1,2],[4,1,2,2],[4,2,2,2],[4,3,1,2],[6,1,2,3],[6,1,3,2]]

  describe "listers" $ do
    describe "listPrograms'" $ do
      it "???" $ do
        listPrograms' (sumOfNatLs 10) funM1 2 `shouldBe` [[[0,0],[0,1],[0,2],[0,3],[0,4],[0,5],[0,6],[0,7],[0,8],[1,0],[1,1],[1,2],[1,3],[1,4],[1,5],[1,6],[1,7],[1,8],[2,0],[2,1],[2,2],[2,3],[2,4],[2,5],[2,6],[2,7],[2,8],[3,0],[3,1],[3,2],[3,3],[3,4],[3,5],[3,6],[3,7],[3,8],[4,0],[4,1],[4,2],[4,3],[4,4],[4,5],[4,6],[4,7],[4,8],[5,0],[5,1],[5,2],[5,3],[5,4],[5,5],[5,6],[5,7],[5,8],[6,0],[6,1],[6,2],[6,3],[6,4],[6,5],[6,6],[6,7],[6,8],[7,0],[7,1],[7,2],[7,3],[7,4],[7,5],[7,6],[7,7],[7,8],[8,0],[8,1],[8,2],[8,3],[8,4],[8,5],[8,6],[8,7],[8,8]],[[0,0],[0,4],[1,5],[2,5],[3,6],[4,0],[4,4],[5,2],[6,3]],[[2,5],[5,1],[5,2]],[[0,1],[1,0],[2,5],[5,2]],[[2,5],[5,2]],[[1,1],[2,5],[5,2]],[[2,5],[5,2]],[[2,5],[5,2]],[[2,5],[5,2]],[[2,5],[5,2]],[[2,5],[5,2]]]

    describe "listPrograms" $ do
      it "???" $ do
        listPrograms (sumOfNatLs 10)      funM1 2 `shouldBe` [[2,5],[5,2]]
        -- this takes forever so might not want to run it listPrograms (sumOfSumOfNatLs 10) funM1 6 `shouldBe` [[3,1,2,3,6,8],[3,1,2,3,8,6],[3,1,2,6,3,8],[3,1,2,6,8,3],[3,1,2,8,3,6],[3,1,2,8,6,3],[3,1,3,2,6,8],[3,1,3,2,8,6],[3,1,3,6,2,8],[3,1,3,6,8,2],[3,1,3,8,2,6],[3,1,3,8,6,2],[3,1,6,2,3,8],[3,1,6,2,8,3],[3,1,6,3,2,8],[3,1,6,3,8,2],[3,1,6,8,2,3],[3,1,6,8,3,2],[3,1,8,2,3,6],[3,1,8,2,6,3],[3,1,8,3,2,6],[3,1,8,3,6,2],[3,1,8,6,2,3],[3,1,8,6,3,2]]
        listPrograms (randFunc 10)        funM1 2 `shouldBe` []
        listPrograms (randFunc 20)        funM2 4 `shouldBe` [[0,0,2,2],[0,2,0,2],[2,0,2,2],[2,2,0,2]]
        listPrograms (randFunc 20)        funM3 4 `shouldBe` [[0,0,2,2],[0,2,0,2],[2,0,2,2],[2,2,0,2]]
